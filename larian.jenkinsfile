#!/usr/bin/env groovy
/*CIA_Larian_TEST_Pipeline
*/

pipeline {
  // environment {
  //   String VERSION = ""
  // }
  agent none
  options {
    skipDefaultCheckout true
  }
  stages {
    stage('Build') {
      parallel {
        stage('dx11') {
          agent {
              label "BuildServer 1"
          }
          steps {
            checkout scm
            echo "Hello dx11"
            echo "${env.WORKSPACE}"
          }
          post {
              always {
                      echo "Hello dx11 post"
              }
          }
        }
        stage('data') {
          agent any
          steps {
            script {
              checkout scm
              def GOG_VERSION = bat (
                script: """C:/Users/Devcan1/AppData/Local/Programs/Python/Python310/python parser.py gog.xml""",
                returnStdout: true,
              ).trim()
              echo "GoG build details:\n ${GOG_VERSION}"
              def BUILD_DETAILS_AS_LIST = GOG_VERSION.split('\n')
              env.VERSION = BUILD_DETAILS_AS_LIST[4].split(' ')[1]
              def STEAM_VERSION = bat (
                script: """C:/Users/Devcan1/AppData/Local/Programs/Python/Python310/python parser.py steam.xml""",
                returnStdout: true,
              ).trim()
              echo "Steam build details:\n ${STEAM_VERSION}"
            }
          }
          post {
            always {
                    echo "Hello data post"
            }
          }
        }
        stage('vulkan') {
          agent {
            label "BuildServer 2"
          }
          steps {
            checkout scm
            echo "Hello vulkan"
            echo "${env.WORKSPACE}"
          }
          post {
            always {
              echo "Hello vulkan post"
            }
          }
        }
      }
    }
    stage('Upload') {
      parallel {
        stage('patch and upload') {
          stages {
            stage('patch creation') {
              agent any
              steps {
                script {
                  try {
                    echo "Version is: ${env.VERSION}"
                    echo "Previous build version was: ${currentBuild.previousBuild.buildVariables["VERSION"]}"
                    if (currentBuild.previousBuild.buildVariables["VERSION"] != env.VERSION) {
                      echo "Updating version"
                      currentBuild.displayName = env.VERSION
                    } else {
                      echo "Version unchanged. Nothing to do!"
                    }
                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                        echo "Hello creation post"
                }
              }
            }
            stage('patch upload GoG') {
              agent any
              steps {
                script {
                  try {
                    echo "patch upload GoG"
                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                        echo "patch upload GoG post"
                }
              }
            }
            stage('patch upload steam') {
              agent any
              steps {
                script {
                  try {
                    echo "patch upload steam"

                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                        echo "patch upload steam post"
                }
              }
            }
          }
        }
        stage('upload symbols to symbolserver') {
          agent any
          steps {
            script {
              try {
                echo "Hello symbolserver"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
              always {
                      echo "Hello symbolserver post"
              }
          }
        }
        stage('upload to steam') {
          agent any
          steps {
            script {
              try {
                echo "Hello steam"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello steam post"
            }
          }
        }
        stage('upload to GoG') {
          agent any
          steps {
            script {
              try {
                echo "Hello GoG"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello GoG post"
            }
          }
        }
        stage('installer package creation') {
          agent any
          steps {
            script {
              try {
                echo "Hello package"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello package post"
            }
          }
        }
      }
    }
  }
}
