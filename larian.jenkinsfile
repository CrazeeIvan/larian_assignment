#!/usr/bin/env groovy
/*
###############################################################################
#               Author: Ciaran Maher                                          #
#               Email:  ciaranmaher@gmail.com                                 #
#               Date:   11/06/2022                                            #
###############################################################################
*/

pipeline {
  agent none
  options {
    /*Only need to checkout during "Build stage" given provided architecture.
    Thus increasing efficiency. May be necessary to revert this option depending on
    actual architecture.*/
    skipDefaultCheckout true
  }
  stages {
    stage('Build') {
      parallel {
        stage('dx11') {
          agent any
          steps {
            checkout scm
            echo "Hello dx11"
            echo "${env.WORKSPACE}"
          }
          post {
              always {
                echo "Hello dx11 post"
              }
          }
        }
        stage('data') {
          agent any
          steps {
            script {
              checkout scm
              /*Unable to set python path in jenkins. Spent ~1 hour tinkering with it and decided it
              was a low priority when I can just use an absolute path to python. This is only possible
              because python is installed in the same directory for all potential node/agents and
              should be resolved.
              */
              def GOG_VERSION = bat (
                script: """C:/Users/Devcan1/AppData/Local/Programs/Python/Python310/python parser.py gog.xml""",
                returnStdout: true,
              ).trim()
              echo "GoG build details:\n ${GOG_VERSION}"
              /*Assuming that GoG and Steam versions are the same but do not check to confirm. As both versions are
              expected to be the same, only the GoG version is used as the build version. There are many viable ways
              to address this, but outside scope for this assignment.
              */
              env.VERSION = GOG_VERSION.split('\n')[4].split(' ')[1]
              def STEAM_VERSION = bat (
                script: """C:/Users/Devcan1/AppData/Local/Programs/Python/Python310/python parser.py steam.xml""",
                returnStdout: true,
              ).trim()
              echo "Steam build details:\n ${STEAM_VERSION}"
            }
          }
          post {
            always {
              echo "Hello data post"
            }
          }
        }
        stage('vulkan') {
          agent any
          steps {
            checkout scm
            echo "Hello vulkan"
            echo "${env.WORKSPACE}"
          }
          post {
            always {
              echo "Hello vulkan post"
            }
          }
        }
      }
    }
    stage('Upload') {
      parallel {
        stage('patch and upload') {
          /*Separate "patch and upload" stage is probably a detriment to the build logic
          as it delays the execution of the "patch creation" stage until after the
          node/agents become available again. Meaning the stage with the longest typical run-time is executed last.
          Possibility for optimisation here.*/
          stages {
            stage('patch creation') {
              agent any
              steps {
                script {
                  try {
                    echo "Version is: ${env.VERSION}"
                    echo "Previous build version was: ${currentBuild.previousBuild.buildVariables["VERSION"]}"
                    if (currentBuild.previousBuild.buildVariables["VERSION"] != env.VERSION) {
                      echo "Updating version"
                      currentBuild.displayName = env.VERSION
                    } else {
                      echo "Version unchanged. Nothing to do!"
                    }
                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                  echo "Hello creation post"
                }
              }
            }
            stage('patch upload GoG') {
              agent any
              steps {
                script {
                  try {
                    echo "patch upload GoG"
                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                  echo "patch upload GoG post"
                }
              }
            }
            stage('patch upload steam') {
              agent any
              steps {
                script {
                  try {
                    echo "patch upload steam"

                  }
                  catch (err) {
                    unstable(message: "${STAGE_NAME} is unstable")
                  }
                }
              }
              post {
                always {
                  echo "patch upload steam post"
                }
              }
            }
          }
        }
        stage('upload symbols to symbolserver') {
          agent any
          steps {
            script {
              try {
                echo "Hello symbolserver"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
              always {
                echo "Hello symbolserver post"
              }
          }
        }
        stage('upload to steam') {
          agent any
          steps {
            script {
              try {
                echo "Hello steam"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello steam post"
            }
          }
        }
        stage('upload to GoG') {
          agent any
          steps {
            script {
              try {
                echo "Hello GoG"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello GoG post"
            }
          }
        }
        stage('installer package creation') {
          agent any
          steps {
            script {
              try {
                echo "Hello package"

              }
              catch (err) {
                unstable(message: "${STAGE_NAME} is unstable")
              }
            }
          }
          post {
            always {
              echo "Hello package post"
            }
          }
        }
      }
    }
  }
}
